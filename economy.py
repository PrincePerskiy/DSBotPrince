import aiosqlite
import random
import time
from datetime import datetime, timedelta

class Economy:
    def __init__(self, db_path="economy.db"):
        self.db_path = db_path

    async def initialize(self):
       async with aiosqlite.connect(self.db_path) as db:
        await db.execute("""
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                balance INTEGER DEFAULT 0,
                last_work INTEGER DEFAULT 0
            )
        """)
        await db.commit()


    async def get_balance(self, user_id):
        async with aiosqlite.connect(self.db_path) as db:
            async with db.execute("SELECT balance FROM users WHERE user_id = ?", (user_id,)) as cursor:
                row = await cursor.fetchone()
                return row[0] if row else 0

    async def update_balance(self, user_id, amount):
        async with aiosqlite.connect(self.db_path) as db:
            await db.execute("INSERT INTO users (user_id, balance) VALUES (?, ?) ON CONFLICT(user_id) DO UPDATE SET balance = balance + ?",
                             (user_id, amount, amount))
            await db.commit()


    async def daily(self, user_id):
        await self.update_balance(user_id, 100)  

    async def transfer(self, from_user, to_user, amount):
        from_balance = await self.get_balance(from_user)
        if from_balance < amount:
            return False
        await self.update_balance(from_user, -amount)
        await self.update_balance(to_user, amount)
        return True

    async def lottery(self, user_id, ticket_price=50):
        """–ò–≥—Ä–æ–∫ –ø–æ–∫—É–ø–∞–µ—Ç –±–∏–ª–µ—Ç, —Å–ª—É—á–∞–π–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –ø–æ–ª—É—á–∞–µ—Ç –≤–µ—Å—å —Ñ–æ–Ω–¥."""
        participants = []
        async with aiosqlite.connect(self.db_path) as db:
            async with db.execute("SELECT user_id FROM users WHERE balance >= ?", (ticket_price,)) as cursor:
                participants = [row[0] for row in await cursor.fetchall()]
        
        if user_id not in participants:
            return "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –±–∏–ª–µ—Ç–∞."
        
        prize_pool = len(participants) * ticket_price
        winner = random.choice(participants) if participants else None
        
        if winner:
            await self.update_balance(winner, prize_pool)
            return f"–ü–æ–±–µ–¥–∏—Ç–µ–ª—å –ª–æ—Ç–µ—Ä–µ–∏: {winner}, –≤—ã–∏–≥—Ä—ã—à: {prize_pool} –º–æ–Ω–µ—Ç!"
        return "–õ–æ—Ç–µ—Ä–µ—è –Ω–µ —Å–æ—Å—Ç–æ—è–ª–∞—Å—å, –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤."
    
    async def slots(self, user_id, bet):
        """–ò–≥—Ä–∞ –≤ —Å–ª–æ—Ç—ã, —à–∞–Ω—Å –Ω–∞ –≤—ã–∏–≥—Ä—ã—à x2 —Å—Ç–∞–≤–∫–∏."""
        if bet <= 0:
           return "‚ùå –°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0."
    
        user_balance = await self.get_balance(user_id)
        if user_balance < bet:
           return "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤."
    
        symbols = ["üçí", "üçã", "üîî", "‚≠ê", "üíé"]
        result = [random.choice(symbols) for _ in range(3)]
        display = " | ".join(result)
    
        if len(set(result)) == 1:
             winnings = bet * 2
             await self.update_balance(user_id, winnings)
             return f"`{display}`\nüéâ **–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!** –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ **{winnings}** –º–æ–Ω–µ—Ç!"
        else:
             await self.update_balance(user_id, -bet)
        return f"`{display}`\nüò¢ –£–≤—ã, –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ **{bet}** –º–æ–Ω–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!"

    
    async def guess_number(self, user_id, bet, guess):
       if bet <= 0:
           return "–°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0."

       user_balance = await self.get_balance(user_id)
       if user_balance < bet:
           return "–£ —Ç–µ–±—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å—Ç–∞–≤–∫–∏."

       number = random.randint(1, 10)

       if guess == number:
           winnings = bet * 5
           await self.update_balance(user_id, winnings)
           return f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –¢—ã —É–≥–∞–¥–∞–ª —á–∏—Å–ª–æ **{number}** –∏ –≤—ã–∏–≥—Ä–∞–ª **{winnings}** –º–æ–Ω–µ—Ç!"
       else:
           await self.update_balance(user_id, -bet)
           return f"üò¢ –£–≤—ã, —Ç—ã –≤—ã–±—Ä–∞–ª **{guess}**, –∞ –≤—ã–ø–∞–ª–æ —á–∏—Å–ª–æ **{number}**. –¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª **{bet}** –º–æ–Ω–µ—Ç."



    async def leaderboard(self):
        async with aiosqlite.connect(self.db_path) as db:
            async with db.execute("SELECT user_id, balance FROM users ORDER BY balance DESC LIMIT 10") as cursor:
                return await cursor.fetchall()    